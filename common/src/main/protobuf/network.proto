syntax = "proto3";

package protos;

service Network {
    rpc Connection (ConnectionRequest) returns (ConnectionReply) {}
    rpc Sampling (stream SamplingRequest) returns (SamplingReply) {}
    rpc Range (RangeRequest) returns (RangeReply) {}
    rpc SortPartition (SortPartitionRequest) returns (SortPartitionReply) {}
    rpc ShuffleReady(ShuffleReadyRequest) returns(ShuffleReadyReply){}
    rpc ShuffleComplete(ShuffleCompleteRequest) returns(ShuffleCompleteReply) {}
    rpc Merge (MergeRequest) returns (MergeReply) {}
  }

  enum ResultType {
    FAILURE = 0;
    PENDING = 1;
    SUCCESS = 2;
  }
  message Range{
    string from = 1;
    string to = 2;
  }
  message Address {
    string ip = 1;
    int32 port = 2;
  }

  /*
    connection phase
  */
  message ConnectionRequest {
    Address addr = 1;
  }
  message ConnectionReply {
    ResultType result = 1;
    string message = 2;
  }

  /*
    sampling phase
  */
  message SamplingRequest {
    Address addr = 1;
    bytes sample = 2;
  }
  message SamplingReply {
    ResultType result = 1;

  }
  /*
    get range phase
  */
  message RangeRequest {
    Address addr = 1;
  }
  message RangeReply {
    ResultType result = 1;
    repeated Range ranges= 2;
    repeated Address addresses= 3;
  }

  /*
    sort/partition phase
  */
  message SortPartitionRequest {
    Address addr = 1;
    string message = 2;
  }
  message SortPartitionReply {
    ResultType result = 1;
    string message = 2;
  }

  /*
    shuffle phase
  */
  message ShuffleReadyRequest {
    Address addr = 1;
    bool serverstate = 2;
  }
  message ShuffleReadyReply {
    ResultType result = 1;
  }
  message ShuffleCompleteRequest {
    Address addr = 1;
    bool shufflecomplete = 2;
  }
  message ShuffleCompleteReply {
    ResultType result = 1;
  }

  /*
    merge phase
  */
  message MergeRequest {
    Address addr = 1;
  }

  message MergeReply {
    ResultType result = 1;
    string message = 2;
  }
